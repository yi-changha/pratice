OOP(객체 지향 프로그래밍)의 4대 원리(원칙, 특성, 특징)
1. 캡슐화 (Encapsulation) (클래스 내 추상화)  54강
	무엇	- 데이터(멤버 변수)와 기능(멤버 메서드)을 하나의 단위로 묶어 놓음.
			- 데이터를 보이지 않게 가리고, 데이터에 접근하기 위한 메서드만을 노출 (데이터 은닉)
	언제	- 언제든!
	왜		- 클래스 사용자: 클래스 내부 구조 이해할 필요X, 사용법만 알면 됨.
							데이터를 실수로 잘못 바꾸는 것을 방지
	어떻게	- 클래스 안에 멤버 변수, 멤버 메서드 선언 / 접근 제어

2. 상속성 (Inheritance)  75강
	무엇	- 부모 클래스의 멤버를 재사용해서 자식 클래스에서도 사용할 수 있음
	언제	- 부모 클래스에서 할 수 있는 일을 자식 클래스에서 할 수 있을 때
			- 자식 클래스는 부모 클래스의 일종이다 (A is a B)
	왜		- 코드 재사용
	어떻게	- 상속!

3. 다형성 (Polymorhism)  78강
	무엇	- 동적 다형성 : 한 클래스가 그로부터 파생된 다양한 형태를 지닐 수 있음
			- 정적 다형성 : 함수 오버로딩, 템플릿
	언제	- 자식 클래스의 메서드 구현이 부모 클래스와 다를 때
	왜		- 자식 클래스에서 하고 싶은 일들이 부모 클래스에서와 다를 수 있음.
	어떻게	- 오버라이딩, 가상 함수!! (RTTI, 다형적 클래스) - 동적 바인딩

4. 추상화 (Abstracition) (클래스 간 추상화)  80강
	무엇	- 부모 클래스 : 클래스가 구현해야 할 기능만을 명시 (순수 가상 함수)
			- 자식 클래스 : 실제 구현
	언제	- [자식 클래스]는 [부모 클래스]할 수 있어야 한다. (A is able to B)
	왜		- "자동차" : 운전대, 페달, 기어 변속기 (추상 클래스)
			- 각 부품의 작동 원리는 자동차 종류마다 다름
	어떻게	- 추상 클래스 (순수 가상 함수)